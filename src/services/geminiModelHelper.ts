// src/services/geminiModelHelper.ts
export async function getValidGeminiModel(apiKey: string, preferredModel = "gemini-2.0-pro") {
  const endpoint = "https://generativelanguage.googleapis.com/v1beta/models";
  try {
    const response = await fetch(endpoint, {
      headers: {
        "Authorization": `Bearer ${apiKey}`,
      },
    });

    if (!response.ok) {
      console.error("‚ùå L·ªói khi g·ªçi API ListModels:", response.status, await response.text());
      return preferredModel;
    }

    const data = await response.json();
    const models = data.models || [];

    console.log("üìú Danh s√°ch model kh·∫£ d·ª•ng:");
    models.forEach((m: any) => {
      console.log(`- ${m.name} (${m.displayName || "no displayName"})`);
    });

    // Ki·ªÉm tra n·∫øu model b·∫°n mong mu·ªën c√≥ trong danh s√°ch
    const found = models.find((m: any) => m.name.includes(preferredModel));

    if (found) {
      console.log(`‚úÖ Model "${preferredModel}" kh·∫£ d·ª•ng, s·∫Ω d√πng model n√†y.`);
      return found.name;
    }

    // N·∫øu kh√¥ng c√≥ model mong mu·ªën, ch·ªçn model ƒë·∫ßu ti√™n h·ªó tr·ª£ generateContent
    const fallback = models.find((m: any) => (m.supportedMethods || []).includes("generateContent"));

    if (fallback) {
      console.warn(`‚ö†Ô∏è Model "${preferredModel}" kh√¥ng kh·∫£ d·ª•ng. S·ª≠ d·ª•ng model thay th·∫ø: "${fallback.name}"`);
      return fallback.name;
    }

    console.error("‚ùå Kh√¥ng t√¨m th·∫•y model n√†o h·ªó tr·ª£ generateContent.");
    return "";
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch model:", error);
    return preferredModel;
  }
}
