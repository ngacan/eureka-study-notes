// ============================================================================
// ‚úÖ FIX CHO L·ªñI "process is not defined" & c·∫£i thi·ªán t∆∞∆°ng th√≠ch Vite/TypeScript
// ============================================================================

/* global window */
if (typeof window !== "undefined" && typeof window.process === "undefined") {
  (window as any).process = { env: { NODE_ENV: "production" } };
}

import { GoogleGenerativeAI, GenerativeModel } from "@google/generative-ai";
import type { Note, ProgressAnalysis } from "../types";

// ‚úÖ Helper: Kh·ªüi t·∫°o client an to√†n
const getAiClient = (): GoogleGenerativeAI | null => {
  const apiKey = import.meta.env.VITE_API_KEY;
  if (!apiKey) {
    console.error(
      "‚ùå L·ªói: VITE_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m v√†o file .env.local"
    );
    return null;
  }
  try {
    return new GoogleGenerativeAI(apiKey);
  } catch (e) {
    console.error("‚ùå L·ªói kh·ªüi t·∫°o GoogleGenerativeAI:", e);
    return null;
  }
};

// ============================================================================
// üéØ 1. Ph√¢n t√≠ch l·ªói sai trong ghi ch√∫
// ============================================================================
export const analyzeMistakes = async (notes: Note[]): Promise<string> => {
  if (notes.length === 0) {
    return "Ch∆∞a c√≥ ghi ch√∫ n√†o ƒë·ªÉ ph√¢n t√≠ch. H√£y th√™m ghi ch√∫ tr∆∞·ªõc nh√©!";
  }

  const ai = getAiClient();
  if (!ai) return "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key cho AI.";

  try {
    const prompt = `
      D·ª±a tr√™n c√°c ghi ch√∫ h·ªçc t·∫≠p sau, h√£y ƒë√≥ng vai m·ªôt hu·∫•n luy·ªán vi√™n h·ªçc t·∫≠p chuy√™n nghi·ªáp.
      Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
      1. N√™u 2-3 d·∫°ng l·ªói sai ph·ªï bi·∫øn nh·∫•t v√† nguy√™n nh√¢n g·ªëc r·ªÖ.
      2. G·ª£i √Ω 3 chi·∫øn l∆∞·ª£c ho·∫∑c b√†i t·∫≠p c·ª• th·ªÉ ƒë·ªÉ c·∫£i thi·ªán.
      H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu, b·∫±ng ti·∫øng Vi·ªát, c√≥ ƒë·ªãnh d·∫°ng markdown.
      
      D·ªØ li·ªáu ghi ch√∫:
      ${JSON.stringify(notes, null, 2)}
    `;

    const model = ai.getGenerativeModel({ model: "gemini-2.0-flash" });
    const result = await model.generateContent(prompt);
    return result.response.text() ?? "AI kh√¥ng ph·∫£n h·ªìi.";
  } catch (error) {
    console.error("AI Error:", error);
    return "‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch hi·ªán t·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
};

// ============================================================================
// üéØ 2. Ph√¢n t√≠ch ti·∫øn ƒë·ªô h·ªçc t·∫≠p
// ============================================================================
export const analyzeProgress = async (
  notes: Note[]
): Promise<ProgressAnalysis> => {
  const fallback: ProgressAnalysis = {
    evaluation: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ƒë√°nh gi√° ti·∫øn ƒë·ªô.",
    chartDataByDifficulty: [],
    chartDataBySubject: [],
  };

  if (notes.length === 0) return fallback;

  const ai = getAiClient();
  if (!ai) return { ...fallback, evaluation: "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh API Key cho AI." };

  try {
    const prompt = `
      H√£y ph√¢n t√≠ch ti·∫øn ƒë·ªô h·ªçc t·∫≠p d·ª±a tr√™n c√°c ghi ch√∫ sau.
      - Nh√≥m ghi ch√∫ theo th√°ng.
      - ƒê·∫øm s·ªë l∆∞·ª£ng l·ªói theo ƒë·ªô kh√≥ v√† m√¥n h·ªçc.
      - Vi·∫øt ƒëo·∫°n nh·∫≠n x√©t ƒë·ªông vi√™n ng·∫Øn g·ªçn (2‚Äì4 c√¢u) v·ªÅ xu h∆∞·ªõng h·ªçc t·∫≠p.
      Tr·∫£ v·ªÅ JSON g·ªìm: "evaluation", "chartDataByDifficulty", "chartDataBySubject".
      
      D·ªØ li·ªáu:
      ${JSON.stringify(notes, null, 2)}
    `;

    const model = ai.getGenerativeModel({ model: "gemini-2.0-pro" });
    const result = await model.generateContent(prompt);
    const text = result.response.text().trim();

    try {
      const parsed = JSON.parse(text);
      return parsed as ProgressAnalysis;
    } catch {
      return {
        ...fallback,
        evaluation:
          "‚ö†Ô∏è AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i sau.",
      };
    }
  } catch (error) {
    console.error("AI Error:", error);
    return {
      ...fallback,
      evaluation: "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch ti·∫øn ƒë·ªô.",
    };
  }
};
